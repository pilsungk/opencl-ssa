#ifndef TINYMT64_JUMP_CLH
#define TINYMT64_JUMP_CLH
/**
 * @file tinymt64_jump.clh
 *
 * @brief Sample Program for openCL 1.2
 *
 * tinymt64
 * This program generates 64-bit unsigned integers.
 * The period of generated integers is 2<sup>127</sup>-1.
 *
 * This also generates double precision floating point numbers
 * uniformly distributed in the range [1, 2). (float r; 1.0 <= r < 2.0)
 *
 * @author Mutsuo Saito (Hiroshima University)
 * @author Makoto Matsumoto (The University of Tokyo)
 *
 * Copyright (C) 2013 Mutsuo Saito, Makoto Matsumoto,
 * Hiroshima University and The University of Tokyo.
 * All rights reserved.
 *
 * The new BSD License is applied to this software, see LICENSE.txt
 */
#include "tinymt.clh"
#include "tinymt64_jump_table.clh"
#include "tinymt64def.h"

#if defined(HAVE_DOUBLE)
#pragma OPENCL EXTENSION cl_khr_fp64 : enable
#endif

#define TINYMT64J_MIN_LOOP 8

__constant int tinymt64j_sh0 = 12;
__constant int tinymt64j_sh1 = 11;
__constant int tinymt64j_sh8 = 8;
__constant ulong tinymt64j_mask = 0x7fffffffffffffffUL;
__constant uint tinymt64j_mat1  = TINYMT64J_MAT1;
__constant ulong tinymt64j_mat2 = TINYMT64J_MAT2;
__constant ulong tinymt64j_tmat = TINYMT64J_TMAT;
__constant ulong tinymt64j_tmat_double
  = (TINYMT64J_TMAT >> 12) | 0x3ff0000000000000UL;

inline static void
tinymt64j_add(tinymt64j_t * dist, tinymt64j_t * src);
inline static void
tinymt64j_next_state(tinymt64j_t *tiny);
inline static ulong
tinymt64j_temper(tinymt64j_t *tiny);
inline static ulong
tinymt64j_uint64(tinymt64j_t *tiny);
#if defined(HAVE_DOUBLE)
inline static double
tinymt64j_temper_double12(tinymt64j_t *tiny);
inline static double
tinymt64j_double12(tinymt64j_t *tiny);
inline static double
tinymt64j_double01(tinymt64j_t *tiny);
#endif
inline static void
tinymt64j_init_seed(tinymt64j_t *tiny, ulong seed);
inline static void
tinymt64j_init_by_array(tinymt64j_t * tiny,
                        ulong init_key[],
                        int key_length);
inline static void
tinymt64j_period_certification(tinymt64j_t * tiny);
inline static void
tinymt64j_init(tinymt64j_t *tiny, ulong seed);
inline static ulong
tinymt64j_func1(ulong x);
inline static ulong
tinymt64j_func2(ulong x);
inline static void
tinymt64j_jump_by_polynomial(tinymt64j_t *tiny,
                             uint jump_array[4]);

/**
 * Addition of internal state
 * @param dest destination (change)
 * @param src source (not change)
 */
inline static void
tinymt64j_add(tinymt64j_t * dest, tinymt64j_t * src)
{
    dest->s0 ^= src->s0;
    dest->s1 ^= src->s1;
}

/**
 * State transition function
 * @param tiny internal state
 */
inline static void
tinymt64j_next_state(tinymt64j_t *tiny)
{
    ulong x;

    tiny->s0 = tiny->s0 & tinymt64j_mask;
    x = tiny->s0 ^ tiny->s1;
    x ^= x << tinymt64j_sh0;
    x ^= x >> 32;
    x ^= x << 32;
    x ^= x << tinymt64j_sh1;
    tiny->s0 = tiny->s1;
    tiny->s1 = x;
    if (x & 1) {
        tiny->s0 ^= tinymt64j_mat1;
        tiny->s1 ^= (ulong)tinymt64j_mat2 << 32;
    }
}

/**
 * Tempering function
 * @param tiny internal state
 * @return generated number
 */
inline static ulong
tinymt64j_temper(tinymt64j_t *tiny)
{
    ulong x;
    x = tiny->s0 + tiny->s1;
    x ^= tiny->s0 >> 8;
    if (x & 1) {
        x ^= tinymt64j_tmat;
    }
    return x;
}

/**
 * Tempering function
 * @param tiny internal state
 * @return generated number
 */
inline static ulong
tinymt64j_uint64(tinymt64j_t *tiny)
{
    tinymt64j_next_state(tiny);
    return tinymt64j_temper(tiny);
}

#if defined(HAVE_DOUBLE)
/**
 * Tempering function
 * @param tiny internal state
 * @return generated number
 */
inline static double
tinymt64j_temper_double12(tinymt64j_t *tiny)
{
    ulong x;
    x = tiny->s0 + tiny->s1;
    x ^= tiny->s0 >> 8;
    if (x & 1) {
        x = (x >> 12) ^ tinymt64j_tmat_double;
    } else {
        x = (x >> 12) ^ 0x3ff0000000000000UL;
    }
    return as_double(x);
}

/**
 * Tempering function
 * @param tiny internal state
 * @return generated number
 */
inline static double
tinymt64j_double12(tinymt64j_t *tiny)
{
    tinymt64j_next_state(tiny);
    return tinymt64j_temper_double12(tiny);
}

/**
 * Tempering function
 * @param tiny internal state
 * @return generated number
 */
inline static double
tinymt64j_double01(tinymt64j_t *tiny)
{
    return tinymt64j_double12(tiny) - 1.0;
}
#endif

/**
 * Internal function
 * This function represents a function used in the initialization
 * by init_by_array
 * @param x 64-bit integer
 * @return 64-bit integer
 */
inline static ulong
tinymt64j_func1(ulong x) {
    return (x ^ (x >> 59)) * 2173292883993UL;
}

/**
 * Internal function
 * This function represents a function used in the initialization
 * by init_by_array
 * @param x 64-bit integer
 * @return 64-bit integer
 */
inline static ulong
tinymt64j_func2(ulong x) {
    return (x ^ (x >> 59)) * 58885565329898161UL;
}

/**
 * Internal function.
 * This function certificate the period of 2^127-1.
 * @param tiny tinymt state vector.
 */
inline static void
tinymt64j_period_certification(tinymt64j_t * tiny)
{
    if ((tiny->s0 & tinymt64j_mask) == 0 &&
        tiny->s1 == 0) {
        tiny->s0 = 'T';
        tiny->s1 = 'M';
    }
}

/**
 * This function initializes the internal state array with a 64-bit
 * unsigned integer seed.
 * @param tiny tinymt state vector.
 * @param seed a 64-bit unsigned integer used as a seed.
 */
inline static void
tinymt64j_init_seed(tinymt64j_t *tiny, ulong seed)
{
    ulong status[2];
    status[0] = seed ^ ((ulong)tinymt64j_mat1 << 32);
    status[1] = tinymt64j_mat2 ^ tinymt64j_tmat;
    for (int i = 1; i < TINYMT64J_MIN_LOOP; i++) {
        status[i & 1] ^= i + 6364136223846793005UL
            * (status[(i - 1) & 1] ^ (status[(i - 1) & 1] >> 62));
    }
    tiny->s0 = status[0];
    tiny->s1 = status[1];
    tinymt64j_period_certification(tiny);
}

/**
 * This function initializes the internal state array,
 * with an array of 64-bit unsigned integers used as seeds
 * @param tiny tinymt state vector.
 * @param init_key the array of 64-bit integers, used as a seed.
 * @param key_length the length of init_key.
 */
inline static void
tinymt64j_init_by_array(tinymt64j_t * tiny,
                        ulong init_key[],
                        int key_length)
{
    const int lag = 1;
    const int mid = 1;
    const int size = 4;
    int i, j;
    int count;
    ulong r;
    ulong st[4];

    st[0] = 0;
    st[1] = tinymt64j_mat1;
    st[2] = tinymt64j_mat2;
    st[3] = tinymt64j_tmat;
    if (key_length + 1 > TINYMT64J_MIN_LOOP) {
        count = key_length + 1;
    } else {
        count = TINYMT64J_MIN_LOOP;
    }
    r = tinymt64j_func1(st[0] ^ st[mid % size]
                  ^ st[(size - 1) % size]);
    st[mid % size] += r;
    r += key_length;
    st[(mid + lag) % size] += r;
    st[0] = r;
    count--;
    for (i = 1, j = 0; (j < count) && (j < key_length); j++) {
        r = tinymt64j_func1(st[i % size]
                      ^ st[(i + mid) % size]
                      ^ st[(i + size - 1) % size]);
        st[(i + mid) % size] += r;
        r += init_key[j] + i;
        st[(i + mid + lag) % size] += r;
        st[i % size] = r;
        i = (i + 1) % size;
    }
    for (; j < count; j++) {
        r = tinymt64j_func1(st[i % size]
                      ^ st[(i + mid) % size]
                      ^ st[(i + size - 1) % size]);
        st[(i + mid) % size] += r;
        r += i;
        st[(i + mid + lag) % size] += r;
        st[i % size] = r;
        i = (i + 1) % size;
    }
    for (j = 0; j < size; j++) {
        r = tinymt64j_func2(st[i % size]
                      + st[(i + mid) % size]
                      + st[(i + size - 1) % size]);
        st[(i + mid) % size] ^= r;
        r -= i;
        st[(i + mid + lag) % size] ^= r;
        st[i % size] = r;
        i = (i + 1) % size;
    }
    tiny->s0 = st[0] ^ st[1];
    tiny->s1 = st[2] ^ st[3];
    tinymt64j_period_certification(tiny);
}

/**
 * jump using the jump polynomial.
 * This function is not as time consuming as calculating jump polynomial.
 * This function can use multiple time for the tinymt64j structure.
 * @param tiny tinymt64j structure, overwritten by new state after calling
 * this function.
 * @param jump_array the jump polynomial calculated by
 * tinymt64j_calculate_jump_polynomial.
 */
inline static void
tinymt64j_jump_by_array(tinymt64j_t *tiny,
                        __constant uint * jump_array)
{
    tinymt64j_t work_z;
    tinymt64j_t * work = &work_z;
    work->s0 = 0;
    work->s1 = 0;

    for (int i = 0; i < 4; i++) {
        uint x = jump_array[i];
        for (int i = 0; i < 32; i++) {
            if ((x & 1) != 0) {
                tinymt64j_add(work, tiny);
            }
            tinymt64j_next_state(tiny);
            x = x >> 1;
        }
    }
    *tiny = *work;
}

inline static void
tinymt64j_init_jump(tinymt64j_t *tiny, ulong seed)
{
    tinymt64j_init_seed(tiny, seed);
    size_t gid = tinymt_get_sequential_id();
    for (int i = 0; (gid != 0) && (i < TINYMT64_JUMP_TABLE_SIZE); i++) {
        if ((gid & 1) != 0) {
            tinymt64j_jump_by_array(tiny, tinymt64_jump_table[i]);
        }
        gid = gid >> 1;
    }
}

inline static void
tinymt64j_init_jump_array(tinymt64j_t *tiny, ulong * seed_array, int size)
{
    tinymt64j_init_by_array(tiny, seed_array, size);
    size_t gid = tinymt_get_sequential_id();
    for (int i = 0; i < TINYMT64_JUMP_TABLE_SIZE; i++) {
        if ((gid & 1) != 0) {
            tinymt64j_jump_by_array(tiny, tinymt64_jump_table[i]);
        }
        gid = gid >> 1;
    }
}

inline static void
tinymt64j_status_write(__global tinymt64j_t * g_status,
                       tinymt64j_t * tiny)
{
    const size_t id = tinymt_get_sequential_id();
    g_status[id].s0 = tiny->s0;
    g_status[id].s1 = tiny->s1;
}

inline static void
tinymt64j_status_read(tinymt64j_t * tiny,
                      __global tinymt64j_t * g_status)
{
    const size_t id = tinymt_get_sequential_id();
    tiny->s0 = g_status[id].s0;
    tiny->s1 = g_status[id].s1;
}

#endif /* EOF */
